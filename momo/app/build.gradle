plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'jacoco'
}

android {
    compileSdk 32


    defaultConfig {
        applicationId "com.example.momo"
        minSdk 26
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding = true
    }
    task wrapper(type: Wrapper) {
        gradleVersion = '2.2.1' //version required
    }

    task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

        reports {
            xml.enabled = true
            html.enabled = true
        }

        def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
        def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
        def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
        def mainSrc = "${project.projectDir}/src/main/java"

        classDirectories.from = files([debugTree], [kotlinDebugTree])
        sourceDirectories.setFrom(files([mainSrc]))
//        classDirectories.setFrom(files([debugTree]))
        executionData.setFrom(fileTree(dir: "$buildDir", includes: [
                "jacoco/testDebugUnitTest.exec",
                "outputs/code-coverage/connected/*coverage.ec"
        ]))
    }

    testOptions {
        unitTests.all {
            jvmArgs '-noverify', '-ea'
            jacoco {
                includeNoLocationClasses = true
                jacoco.excludes = ['jdk.internal.*']
            }
        }
        unitTests.returnDefaultValues = true
    }
    buildToolsVersion '32.1.0-rc1'


    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    project.gradle.taskGraph.whenReady {
        connectedDebugAndroidTest {
            ignoreFailures = true
        }
    }

}

dependencies {

    implementation 'androidx.databinding:databinding-runtime:4.2.2'
    implementation 'com.google.firebase:firebase-firestore:24.4.0'
    jacoco {
        toolVersion = "0.8.5"
        reportsDirectory.set(layout.buildDirectory.dir("reportsJaCoCo"))

// Custom reports directory can be specfied like this:
// reportsDir = file("$buildDir/customJacocoReportDir")
    }

    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.5.0'

    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.google.firebase:firebase-crashlytics-ktx:18.3.0'
    implementation 'com.google.firebase:firebase-analytics-ktx:21.2.0'

    testImplementation 'junit:junit:4.13.2'
    testImplementation "android.arch.core:core-testing:1.1.1"
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation 'androidx.test:runner:1.4.0'
//    androidTestImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testImplementation 'org.mockito:mockito-core:2.25.0'
    testImplementation 'org.mockito:mockito-inline:2.13.0'
    testImplementation "androidx.test:core:"
    // Optional -- Mockito framework
    testImplementation "org.mockito:mockito-core:4.2.0"
    // Optional -- mockito-kotlin
    testImplementation "org.mockito.kotlin:mockito-kotlin:4.0.0"
    // Optional -- Mockk framework
    testImplementation "io.mockk:mockk:1.10.0"


    implementation "com.google.android.material:material:1.8.0-alpha01"
    implementation 'com.makeramen:roundedimageview:2.3.0'
    implementation 'com.jakewharton.rxbinding3:rxbinding:3.1.0'

    implementation "androidx.camera:camera-camera2:1.1.0-beta03"
    implementation "androidx.camera:camera-lifecycle:1.1.0-beta03"
    implementation "androidx.camera:camera-view:1.1.0-beta03"

    implementation 'com.github.bumptech.glide:glide:4.14.1'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.14.1'

    implementation 'com.google.firebase:firebase-auth-ktx'
    implementation 'com.google.firebase:firebase-config'
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-messaging'
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation platform('com.google.firebase:firebase-bom:30.2.0')

    implementation 'com.github.dktlib:AdmobUtilsLibrary:6.5.5'
}